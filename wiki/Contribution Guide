Setting up Bot Channels Registration
As part of side loading the app into Teams you will be required to set up a Bot Channels Registration on Azure. Follow this guide here to set it up. Make su You will need to use credentials of the Bot Channels Registration to populate the .env file when setting up the project locally. 
Once you have created a Bot Channels Registration, go to ‘Channels’ and enable ‘Microsoft Teams’ as one of the channels. This is a crucial step, without this the Teams app won’t be able to communicate with your webserver.
Setting up the project locally
1.	Clone the Github repo locally
2.	Run `npm install` to install all the required folders into node_modules in the command line
3.	Add a new .env file in the root directory with the following fields
a.	Required
i.	HostName – Web address of the server (excluding ‘https://`)
•	Eg. Botframework.azurewebsites.net 
ii.	ApplicationId - Id of the Microsoft Teams application (or of the Bot Framework bot)
iii.	MicrosoftAppId - App Id for the Bot Framework Bot
•	Bot Channels Registration ‘Microsoft App Id’
iv.	MicrosoftAppPassword - App Password for the Bot Framework Bot
•	Bot Channels Registration ‘Client Secret’
v.	MongoDbUri - URI for locally hosted MongoDB database. 
•	You can download and set up the Azure Cosmos DB Emulator (MongoDbUri) using this guide and use the given MongoDb URI. You can also set up your own locally hosted MongoDB database.
vi.	Version – Teams App version
•	Eg. 1.0.0
vii.	Port 
•	Eg. 3007
viii.	DebugMode
•	Set to `true`
ix.	Company – Company Name for the Bot Manifest
x.	BotDisplayName - Display name of the Bot
b.	Optional
i.	NGROK_AUTH - NGROK authentication token
ii.	NGROK_SUBDOMAIN - NGROK sub doman
iii.	NGROK_REGION - NGROK region
iv.	ApplicationInsightsInstrumentationKey - Application Insights instrumentation key
v.	DefaultMaxRetryCount - Max retry count of retriable failed Cosmos DB (through Mongoose)
vi.	DefaultMaxWaitTime - Max wait time of retriable failed Cosmos DB (through Mongoose)
vii.	DefaultRetryAfterMs - Retry interval of retriable failed Cosmos DB (through Mongoose)
viii.	ExponentialRetryMaxWaitTime - Max retry wait of retriable failed Cosmos DB (through Mongoose) using the Exponential Backoff policy
ix.	ExponentialRetryAfterMs - Retry interval of retriable failed Cosmos DB (through Mongoose) using the Exponential Backoff policy
4.	Get the webserver running
a.	After the .env file has been populated with the required variables, do `gulp serve` to run the server locally.
5.	Set up tunneling software (NGROK) and update Bot Channels Registration
a.	Do `gulp start-ngrok` to open a tunnel to the port in which your webserver is running.
b.	Use the public URL generated by ngrok to update the `messaging endpoint` on Bot Channels Registration. 
i.	If the URL generated was ‘abc1234567.ngrok.io’ then update the message endpoint in Bot Channels Registration to ‘abc1234567.ngrok.io/api/messages’.
6.	Sideload the App Manifest to Teams
a.	After the .env file has been populated with the required variables, do ‘gulp manifest’. This will generate a zip file of in the ‘package’ folder in the root directory.
b.	The zip file contains the Teams App Manifest that you can readily sideload. Follow this documentation to sideload the bot to teams. 
7.	After completing the previous steps including setting up Bot Channels Registration, the Bot should work properly.


Adding new features
•	Good coding practices including comments and unit tests
•	Detailed PR description including problem and how the solution was implemented
•	Documentation changes needed for the change
•	Confirmation of tests done to verify change (description of test cases)

Once a PR is made with these changes, the repo owner will comment on any missing info or issues and merge to master once approved.

